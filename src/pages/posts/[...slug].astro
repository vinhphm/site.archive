---
import { Image } from 'astro:assets'
import BaseLayout from '@/layouts/BaseLayout.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import { type CollectionPosts } from '@/types'
import { getPosts } from '@/utils/posts'

export async function getStaticPaths() {
  const posts = await getPosts()
  return posts.map((post: CollectionPosts) => {
    return {
      params: { slug: post.slug },
      props: {
        post,
      },
    }
  })
}

type Props = { post: CollectionPosts }

const { post } = Astro.props
const { title, image, description, date, tag, duration } = post.data

const { Content, headings } = await post.render()

function getDate(date: string) {
  return new Date(date).toISOString()
}

const base = 'https://vinh.dev'
const parentDir = post.slug.split('/').slice(0, -1).join('/')
const threadUrl = `https://www.threads.net/intent/post?text=${encodeURIComponent(`Reading @vinh.dev's ${base}/posts/${post.slug}\n\nI think...`)}`
const tweetUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(`Reading @vinhtphm's ${base}/posts/${post.slug}\n\nI think...`)}`
---

<BaseLayout title={title} description={description} pageType="article">
  <div class="prose mb-8 m-auto">
    <h1 class="mb-0">{title}</h1>
    <p op-50 class="!-mt-6">
      {date && <time datetime={getDate(date)}>{date.split(',')}</time>}
      {duration && <span>· {duration}</span>}
      {tag && <span>· {tag}</span>}
    </p>
    {
      image && (
        <p>
          <Image width="640" height="360" src={image.src} alt={image.alt} />
        </p>
      )
    }
  </div>
  <article id="content">
    <div class="prose m-auto">
      {
        headings.length > 0 && (
          <TableOfContents headings={headings} />
        )
      }
      <Content />
    </div>
  </article>
  <div class="prose fw-inherit m-auto mt-8 mb-8 print:hidden">
    {
      duration && (
        <>
          <span class="font-mono op75">&gt; </span>
          <span class="op75">comment on </span>
          <a href={threadUrl} target="_blank" class="op75">
            threads
          </a>
          <span class="op40"> / </span>
          <a href={tweetUrl} target="_blank" class="op75">
            twitter
          </a>
        </>
      )
    }
    <br />
    <span class="font-mono op75">&gt; </span>
    <a
      href={'/blog' + (parentDir ? '/' + parentDir : '')}
      class="font-mono op80 hover:op85"
    >
      cd ..
    </a>
  </div>
</BaseLayout>

<script is:inline type="module">
function navigate() {
  if (location.hash) {
    const el = document.querySelector(decodeURIComponent(location.hash))
    if (el) {
      const rect = el.getBoundingClientRect()
      const y = window.scrollY + rect.top - 40
      window.scrollTo({
        top: y,
        behavior: 'smooth',
      })
      return true
    }
  }
  return false
}

function handleAnchors(event) {
  const link = event.target.closest('a')

  if (
    !event.defaultPrevented
    && link
    && event.button === 0
    && link.target !== '_blank'
    && link.rel !== 'external'
    && !link.download
    && !event.metaKey
    && !event.ctrlKey
    && !event.shiftKey
    && !event.altKey
  ) {
    const url = new URL(link.href)
    if (url.origin !== window.location.origin)
      return

    event.preventDefault()
    const { pathname, hash } = url
    if (hash && (!pathname || pathname === location.pathname)) {
      window.history.replaceState({}, '', hash)
      navigate()
    }
    else {
      window.location.href = `${pathname}${hash}`
    }
  }
}

window.addEventListener('hashchange', navigate, { passive: true })
document.getElementById('content')?.addEventListener('click', handleAnchors)

setTimeout(() => {
  if (!navigate())
    setTimeout(navigate, 1000)
}, 1)
</script>
