---
import '@fontsource/inter/variable.css'
import '@/styles/tailwind.css'
import interVariable from '@fontsource/inter/files/inter-latin-variable-wghtOnly-normal.woff2'
import Footer from '@/components/Footer.astro'
import Header from '@/components/Header.astro'

const {
  title = 'Vinh Pham - Coding with style and substance',
  description = 'Coding with style and substance on Vinh.Dev',
  author = 'Vinh Pham',
} = Astro.props
---

<html class="h-full antialiased" lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />

    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />

    <script strategy="beforeInteractive">
      let darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)')

      updateMode()

      darkModeMediaQuery.addEventListener(
        'change',
        updateModeWithoutTransitions
      )
      window.addEventListener('storage', updateModeWithoutTransitions)

      function updateMode() {
        let isSystemDarkMode = darkModeMediaQuery.matches
        let isDarkMode =
          window.localStorage.isDarkMode === 'true' ||
          (!('isDarkMode' in window.localStorage) && isSystemDarkMode)
        if (isDarkMode) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
        if (isDarkMode === isSystemDarkMode) {
          delete window.localStorage.isDarkMode
        }
      }

      function disableTransitionsTemporarily() {
        document.documentElement.classList.add('[&_*]:!transition-none')
        window.setTimeout(() => {
          document.documentElement.classList.remove('[&_*]:!transition-none')
        }, 0)
      }

      function updateModeWithoutTransitions() {
        disableTransitionsTemporarily()
        updateMode()
      }
    </script>

    <link
      rel="preload"
      href={interVariable}
      as="font"
      type="font/woff2"
      crossorigin
    />

    <link href="/favicon.svg" rel="icon" type="image/svg+xml" />
  </head>
  <body class="flex h-full flex-col bg-zinc-50 dark:bg-black">
    <div class="fixed inset-0 flex justify-center sm:px-8">
      <div class="flex w-full max-w-7xl lg:px-8">
        <div
          class="w-full bg-white ring-1 ring-zinc-100 dark:bg-zinc-900 dark:ring-zinc-300/20"
        >
        </div>
      </div>
    </div>
    <div class="relative">
      <Header />

      <main>
        <slot />
      </main>

      <Footer />
    </div>

    <script is:inline>
      const observer = new IntersectionObserver((entries, observer) => {
        entries
          .sort((a, b) => b.intersectionRatio - a.intersectionRatio)
          .forEach((entry, i) => {
            if (entry.isIntersecting) {
              entry.intersectionRatio
              entry.target.dataset.appear = ''
              entry.target.style.setProperty(
                '--animation-delay',
                i + 1 / Math.sqrt(i + 1)
              )

              observer.disconnect()
            }
          })
      })

      document
        .querySelector('main')
        .querySelectorAll('h1,h2,h3,h4,h5,h6,a,li,blockquote,p,time,img')
        .forEach(element => observer.observe(element))
    </script>
  </body>
</html>
