{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport readingTime from 'reading-time'\nimport path from 'path'\n// Remark packages\nimport remarkGfm from 'remark-gfm'\nimport remarkFootnotes from 'remark-footnotes'\nimport remarkMath from 'remark-math'\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from 'pliny/mdx-plugins.js'\n// Rehype packages\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeKatex from 'rehype-katex'\nimport rehypeCitation from 'rehype-citation'\nimport rehypePrismPlus from 'rehype-prism-plus'\nimport rehypePresetMinify from 'rehype-preset-minify'\nconst root = process.cwd()\nconst computedFields = {\n  readingTime: {\n    type: 'json',\n    resolve: (doc) => readingTime(doc.body.raw),\n  },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: {\n    type: 'string',\n    resolve: (doc) => extractTocHeadings(doc.body.raw),\n  },\n}\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: 'blog/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      required: true,\n    },\n    tags: {\n      type: 'list',\n      of: {\n        type: 'string',\n      },\n    },\n    lastmod: {\n      type: 'date',\n    },\n    draft: {\n      type: 'boolean',\n    },\n    summary: {\n      type: 'string',\n    },\n    images: {\n      type: 'list',\n      of: {\n        type: 'string',\n      },\n    },\n    authors: {\n      type: 'list',\n      of: {\n        type: 'string',\n      },\n    },\n    layout: {\n      type: 'string',\n    },\n    bibliography: {\n      type: 'string',\n    },\n    canonicalUrl: {\n      type: 'string',\n    },\n  },\n  computedFields,\n}))\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: {\n      type: 'string',\n      required: true,\n    },\n    avatar: {\n      type: 'string',\n    },\n    occupation: {\n      type: 'string',\n    },\n    company: {\n      type: 'string',\n    },\n    email: {\n      type: 'string',\n    },\n    twitter: {\n      type: 'string',\n    },\n    linkedin: {\n      type: 'string',\n    },\n    github: {\n      type: 'string',\n    },\n    layout: {\n      type: 'string',\n    },\n  },\n  computedFields,\n}))\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Blog, Authors],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      [\n        remarkFootnotes,\n        {\n          inlineNotes: true,\n        },\n      ],\n      remarkMath,\n      remarkImgToJsx,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeKatex,\n      [\n        rehypeCitation,\n        {\n          path: path.join(root, 'data'),\n        },\n      ],\n      [\n        rehypePrismPlus,\n        {\n          ignoreMissing: true,\n        },\n      ],\n      rehypePresetMinify,\n    ],\n  },\n})\n"],
  "mappings": "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",
  "names": []
}
